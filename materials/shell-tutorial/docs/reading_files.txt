File operations
==================

Let's start by navigating to the ``data`` file within the ``shell-tutorial`` folder and seeing what's in there:

.. code-block:: shell

	cd ~/blast_crash_course/materials/shell-tutorial/data
	ls

We see a bunch of sequence fasta files. Let's take a look at what's inside one of them. We can do this using the ``cat`` command. Let's see what's in the ``seq_00.fasta``.

.. code-block:: shell

	cat seq_00.fasta

So ``seq_00.fasta`` contains a single header and a nucleotide sequence on a single line. The header starts with the ``>`` character and contains information about the sequence, and the line after is the nucleotide sequence itself. We can also look at the file using the ``wc`` command:

.. code-block:: shell

	wc seq_00.fasta

The output of ``wc`` command looks like this:

.. code-block:: shell

	2    2 8922 seq_00.fasta

The first value is the number of lines in the file, the second is the number of words, and the third is the size of the file in memory. So we can see that ``seq_00.fasta`` is a fasta file where the sequence has all been put on a single line (ie, linearized). However, this may not always be the case for fasta files as the sequences are sometimes word-wrapped to some word width. We can go through and ``wc`` each of the sequences to verify this...

.. code-block:: shell

	wc seq_01.fasta
	wc seq_02.fasta
	...
	wc seq_31.fasta

...but there is a better way to handle this. We can make use of the ``*``, the wildcard character, to help us. Instead of passing the name of each fasta file to the ``wc`` command individually, we'll use the ``*`` character to specify a **pattern** of filenames, where the ``*`` character stands for "any number of any characters" (hence the name wildcard). Since each file in this directory ends in fasta, we can use ``*`` like so:

.. code-block:: shell

	wc *.fasta

.. code-block:: shell

     2      2   8922 seq_00.fasta
     2      2   8857 seq_01.fasta
     2      2   8910 seq_02.fasta
     2      2   8901 seq_03.fasta
     2      2   8901 seq_04.fasta
     2      2   8901 seq_05.fasta
     2      2   8902 seq_06.fasta
     2      2   8901 seq_07.fasta
     2      2   8900 seq_08.fasta
     2      2   8901 seq_09.fasta
     2      2   8886 seq_10.fasta
     2      2   8408 seq_11.fasta
     2      2   8888 seq_12.fasta
     2      2   8892 seq_13.fasta
     2      2   8913 seq_14.fasta
     2      2   5993 seq_15.fasta
     2      2   8911 seq_16.fasta
     2      2   8910 seq_17.fasta
     2      2   8911 seq_18.fasta
     2      2   8916 seq_19.fasta
     2      2   8911 seq_20.fasta
     2      2   8867 seq_21.fasta
     2      2   8902 seq_22.fasta
     2      2   8902 seq_23.fasta
     2      2   8868 seq_24.fasta
     2      2   8902 seq_25.fasta
     2      2   8902 seq_26.fasta
     2      2   8902 seq_27.fasta
     2      2   8890 seq_28.fasta
     2      2   8898 seq_29.fasta
     2      2   8898 seq_30.fasta
     2      2   8898 seq_31.fasta
    64     64 281364 total

Much easier! Notice how it the total number of lines and words are added up on the bottom.

.. note::
	This style of listing files is called *globbing*. You can read more about it `here <https://en.wikipedia.org/wiki/Glob_(programming)>`_. Globbing is related to *regular expressions*, which is a very powerful tool for text editing and parsing. A lot of the pattern matching we'll do throughout this tutorial will apply to regular expressions, but there are a ton of excellent tutorials online to learn them more indepth. `RegexOne <https://regexone.com/>`_ is a good place to get started.
